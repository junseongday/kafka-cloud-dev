spring:
  config:
#    import: "optional:configserver:"
    import: "optional:configserver:http://localhost:9900"
  application:
    name: kafka-cloud-dev
  cloud:
    function:
      definition:
#        basicProducer;
      #uppercase;
#       basicConsumer;
#      firstInput|secondInput;
#       batch;batchConsumer;
        protoConsumer;
#        protoProducer;
#        mdms.local.180.v2.account
    stream:
      kafka:
        binder:
          brokers: localhost:9092
#          configuration:
#            schema.registry.url: http://localhost:8081
#            key.serializer: org.apache.kafka.common.serialization.StringSerializer
#            value.serializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
#            key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
#            value.deserializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
#            specific.protobuf.value.type: itjs.global.v1.account.status.AccountEvent
      bindings:
        basicProducer-out-0:
          destination: cloud-stream
          content-type: application/json
        basicConsumer-in-0:
          destination: cloud-stream
          contentType: application/octet-stream
          consumer:
            batch-mode: true
        uppercase-out-0:
          destination: cloud-stream
        uppercase-in-0:
          destination: cloud-stream
        firstInput|secondInput-in-0:
          destination: cloud-stream
        batch-out-0:
          destination: cloud-stream
          contentType: application/json
        batchConsumer-in-0:
          destination: cloud-stream
          contentType: application/json
          consumer:
            batch-mode: true
        protoConsumer-in-0:
          destination: mdms.local.180.v2.account
          group: ${spring.application.name}-group
          contentType: application/octet-stream
        protoProducer-out-0:
          destination: mdms.local.180.v2.account
          contentType: application/octet-stream
